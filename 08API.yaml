swagger: '2.0'
info:
  version: 1.0.0
  title: "Sciensa - Filmes API"
  description: "API para catalogar, buscar e alterar filmes, artistas, gêneros cinematográficos e filmografia"
  termsOfService: "/sciensa-filmes-api/v1/terms"
  contact:
    name: "Jorge Hecherat"
    url: "sciensa-filmes-api/v1/contact"
    email: "hecherat@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
basePath: "/sciensa-filmes-api/v1"
tags:
  - name: "Filmes"
  - name: "Artistas"
  - name: "Gênero"
  - name: "Filmografia"
  - name: "Healthcheck"
produces: 
  - application/json
consumes: 
  - application/json
schemes: 
  - https
paths:
  /filmes: #POST #GET
    post:
      tags:
        - "Filmes"
      summary: "Cadastra um Filme"
      description: "Cadastra um novo Filme"
      operationId: "addFilme"
      parameters:
        - in: body
          name: "request"
          required: true
          schema:
            $ref: '#/definitions/Filme'
      responses:
        201:
          description: "Created - Filme cadastrado com sucesso"
          schema:
            $ref: '#/definitions/Filme'
        400:
          description: "Bad Request - Parâmetros informados pelo cliente são inválidos"
          schema:
            $ref: "#/definitions/ResponseError"
        404:
          description: "Not Found - Filme não encontrado"
          schema:
            $ref: "#/definitions/ResponseError"
        500:
          description: "Internal Server Error - Erro não mapeado"
          schema:
            $ref: "#/definitions/ResponseError"
  
    get:
      tags:
        - "Filmes"
      summary: "Retorna lista de Filmes cadastrados"
      description: "Retorna lista de filmes cadastrados com o número de páginas e itens por página"
      operationId: "getFilmes"
      parameters:
        - $ref: '#/parameters/Page'
        - $ref: '#/parameters/Size'
      responses:
        200:
          description: "Ok - Busca efetuada com sucesso"
          schema:
            type: array
            items:
              $ref: '#/definitions/Filme'
        400:
          description: "Bad Request - Parâmetros informados são inválidos"
          schema:
            $ref: '#/definitions/ResponseError'
        404:
          description: "Not Found - Filme não encontrado"
          schema:
            $ref: '#/definitions/ResponseError'
        500:
          description: "Internal Server Error - Erro não mapeado"
          schema:
            $ref: '#/definitions/ResponseError'
    
  /filmes/{id}: #GET #PUT #PATCH #DELETE
    get:
      tags:
        - "Filmes"
      summary: "Retorna um Filme específico"
      description: "Retorna um filme de acordo com o ID fornecido"
      operationId: "getFilme"
      parameters:
        - $ref: '#/parameters/Id'
      responses:
        200:
          description: "Ok - Busca efetuada com sucesso"
          schema:
            $ref: '#/definitions/Filme'
        400:
          description: "Bad Request - Parâmetros informados são inválidos"
          schema:
            $ref: '#/definitions/ResponseError'
        404:
          description: "Not Found - Filme não encontrado"
          schema:
            $ref: '#/definitions/ResponseError'
        500:
          description: "Internal Server Error - Erro não mapeado"
          schema:
            $ref: '#/definitions/ResponseError'
  
    put:
      tags:
        - "Filmes"
      summary: "Atualiza um Filme"
      description: "Atualiza os dados de um Filme cadastrado"
      operationId: "updateFilme"
      parameters:
        - $ref: '#/parameters/Id'
        - in: body
          name: "request"
          schema:
            $ref: '#/definitions/Filme'
      responses:
        200:
          description: "Ok - Filme atualizado com sucesso"
          schema:
            $ref: '#/definitions/Filme'
        400:
          description: "Bad Request - Parâmetros informados são inválidos"
          schema:
            $ref: '#/definitions/ResponseError'
        404:
          description: "Not Found - Filme não encontrado"
          schema:
            $ref: '#/definitions/ResponseError'
        500:
          description: "Internal Server Error - Erro não mapeado"
          schema:
            $ref: '#/definitions/ResponseError'
    
    patch:
      tags:
        - "Filmes"
      summary: "Modifica a URL do Poster de um Filme"
      description:  "Atualiza o Poster de um Filme de acordo com o ID fornecido"
      operationId: "updatePoster"
      parameters:
        - $ref: '#/parameters/Id'
        - in: body
          name: "request"
          schema:
            properties:
              urlPoster:
                type: string
      responses:
        200:
          description: "Ok - Poster alterado com sucesso"
          schema:
            $ref: '#/definitions/Filme'
        400:
          description: "Bad Request - Parâmetros informados são inválidos"
          schema:
            $ref: '#/definitions/ResponseError'
        404:
          description: "Not Found - Filme não encontrado"
          schema:
            $ref: '#/definitions/ResponseError'
        500:
          description: "Internal Server Error - Erro não mapeado"
          schema:
            $ref: '#/definitions/ResponseError'
  
    delete:
      tags:
        - "Filmes"
      summary: "Deleta um Filme"
      description: "Deleta um Filme cadastrado de acordo com o ID fornecido"
      operationId: "deleteFilme"
      parameters:
        - $ref: '#/parameters/Id'
      responses:
        200:
          description: "Ok - Filme deletado com sucesso"
        400:
          description: "Bad Request - Parâmetros informados são inválidos"
          schema:
            $ref: '#/definitions/ResponseError'
        404:
          description: "Not Found - Filme não encontrado"
          schema:
            $ref: '#/definitions/ResponseError'
        500:
          description: "Internal Server Error - Erro não mapeado"
          schema:
            $ref: '#/definitions/ResponseError'
            
  /filmes/artistas: #POST #GET
    post:
      tags:
        - "Artistas"
      summary: "Cadastra um Artista"
      description: "Cadastra um novo Artista"
      operationId: "addAtor"
      parameters:
        - in: body
          name: "request"
          required: true
          schema:
            $ref: '#/definitions/Artista'
      responses:
        201:
          description: "Created - Artista cadastrado com sucesso"
          schema:
            $ref: '#/definitions/Artista'
        400:
          description: "Bad Request - Parâmetros informados pelo cliente são inválidos"
          schema:
            $ref: "#/definitions/ResponseError"
        404:
          description: "Not Found - Artista não encontrado"
          schema:
            $ref: "#/definitions/ResponseError"
        500:
          description: "Internal Server Error - Erro não mapeado"
          schema:
            $ref: "#/definitions/ResponseError"    
  
    get:
      tags:
        - "Artistas"
      summary: "Retorna lista de Artistas cadastrados"
      description: "Retorna uma lista de Artistas cadastrados com o número de páginas e itens por página"
      operationId: "getArtistas"
      parameters:
        - $ref: '#/parameters/Page'
        - $ref: '#/parameters/Size'
      responses:
        200:
          description: "Ok - Busca efetuada com sucesso"
          schema:
            type: array
            items:
              $ref: '#/definitions/Artista'
        400:
          description: "Bad Request - Parâmetros informados são inválidos"
          schema:
            $ref: '#/definitions/ResponseError'
        404:
          description: "Not Found - Artista não encontrado"
          schema:
            $ref: '#/definitions/ResponseError'
        500:
          description: "Internal Server Error - Erro não mapeado"
          schema:
            $ref: '#/definitions/ResponseError'
        
  /filmes/artistas/{id}: #GET #PUT #PATCH #DELETE
    get:
      tags:
        - "Artistas"
      summary: "Retorna um Artista específico"
      description: "Retorna um Artista de acordo com o ID fornecido"
      operationId: "getArtista"
      parameters:
        - $ref: '#/parameters/Id'
      responses:
        200:
          description: "Ok - Busca efetuada com sucesso"
          schema:
            $ref: '#/definitions/Artista'
        400:
          description: "Bad Request - Parâmetros informados são inválidos"
          schema:
            $ref: '#/definitions/ResponseError'
        404:
          description: "Not Found - Artista não encontrado"
          schema:
            $ref: '#/definitions/ResponseError'
        500:
          description: "Internal Server Error - Erro não mapeado"
          schema:
            $ref: '#/definitions/ResponseError'    
           
    put:
      tags:
        - "Artistas"
      summary: "Atualiza um Artista"
      description: "Atualiza os dados de um Artista cadastrado"
      operationId: "updateArtista"
      parameters:
        - $ref: '#/parameters/Id'
        - in: body
          name: "request"
          schema:
            $ref: '#/definitions/Artista'
      responses:
        200:
          description: "Ok - Artista atualizado com sucesso"
          schema:
            $ref: '#/definitions/Artista'
        400:
          description: "Bad Request - Parâmetros informados são inválidos"
          schema:
            $ref: '#/definitions/ResponseError'
        404:
          description: "Not Found - Artista não encontrado"
          schema:
            $ref: '#/definitions/ResponseError'
        500:
          description: "Internal Server Error - Erro não mapeado"
          schema:
            $ref: '#/definitions/ResponseError'     

    patch:
      tags:
        - "Artistas"
      summary: "Modifica a Filmografia do Artista"
      description:  "Adiciona filmes ao artista de acordo com o ID fornecido"
      operationId: "updateFilmografia"
      parameters:
        - $ref: '#/parameters/Id'
        - in: body
          name: "request"
          schema:
            properties:
              idFilme:
                type: integer
                example: 10
      responses:
        200:
          description: "Ok - Filmografia alterada com sucesso"
          schema:
            $ref: '#/definitions/Artista'
        400:
          description: "Bad Request - Parâmetros informados são inválidos"
          schema:
            $ref: '#/definitions/ResponseError'
        404:
          description: "Not Found - Artista não encontrado"
          schema:
            $ref: '#/definitions/ResponseError'
        500:
          description: "Internal Server Error - Erro não mapeado"
          schema:
            $ref: '#/definitions/ResponseError'    
  
    delete:
      tags:
        - "Artistas"
      summary: "Deleta um Artista"
      description: "Deleta um Artista cadastrado de acordo com o ID fornecido"
      operationId: "deleteArtista"
      parameters:
        - $ref: '#/parameters/Id'
      responses:
        200:
          description: "Ok - Artista deletado com sucesso"
        400:
          description: "Bad Request - Parâmetros informados são inválidos"
          schema:
            $ref: '#/definitions/ResponseError'
        404:
          description: "Not Found - Artista não encontrado"
          schema:
            $ref: '#/definitions/ResponseError'
        500:
          description: "Internal Server Error - Erro não mapeado"
          schema:
            $ref: '#/definitions/ResponseError'
    
  /filmes/generos: #POST #GET
    post:
      tags:
        - "Gênero"
      summary: "Cadastra um Gênero"
      description: "Cadastra um novo Gênero"
      operationId: "addGenero"
      parameters:
        - in: body
          name: "request"
          required: true
          schema:
            $ref: '#/definitions/Genero'
      responses:
        201:
          description: "Created - Gênero adicionado com sucesso"
          schema:
            $ref: '#/definitions/Genero'
        400:
          description: "Bad Request - Parâmetros informados pelo cliente são inválidos"
          schema:
            $ref: "#/definitions/ResponseError"
        404:
          description: "Not Found - Gênero não encontrado"
          schema:
            $ref: "#/definitions/ResponseError"
        500:
          description: "Internal Server Error - Erro não mapeado"
          schema:
            $ref: "#/definitions/ResponseError"    
    
    get:
      tags:
        - "Gênero"
      summary: "Retorna lista de Gêneros cadastrados"
      description: "Retorna lista de Gêneros cadastrados com o número de páginas e itens por página"
      operationId: "getGeneros"
      parameters:
        - $ref: '#/parameters/Page'
        - $ref: '#/parameters/Size'
      responses:
        200:
          description: "Ok - Busca efetuada com sucesso"
          schema:
            type: array
            items:
              $ref: '#/definitions/Genero'
        400:
          description: "Bad Request - Parâmetros informados são inválidos"
          schema:
            $ref: '#/definitions/ResponseError'
        404:
          description: "Not Found - Gênero não encontrado"
          schema:
            $ref: '#/definitions/ResponseError'
        500:
          description: "Internal Server Error - Erro não mapeado"
          schema:
            $ref: '#/definitions/ResponseError'
    
  /filmes/generos/{id}: #GET #PUT #PATCH #DELETE
    get:
      tags:
        - "Gênero"
      summary: "Retorna um Gênero específico"
      description: "Retorna um Gênero de acordo com o ID fornecido"
      operationId: "getGenero"
      parameters:
        - $ref: '#/parameters/Id'
      responses:
        200:
          description: "Ok - Busca efetuada com sucesso"
          schema:
            $ref: '#/definitions/Genero'
        400:
          description: "Bad Request - Parâmetros informados são inválidos"
          schema:
            $ref: '#/definitions/ResponseError'
        404:
          description: "Not Found - Gênero não encontrado"
          schema:
            $ref: '#/definitions/ResponseError'
        500:
          description: "Internal Server Error - Erro não mapeado"
          schema:
            $ref: '#/definitions/ResponseError'
            
    put:
      tags:
        - "Gênero"
      summary: "Atualiza um Gênero"
      description: "Atualiza os dados de um Gênero cadastrado de acordo com o ID fornecido"
      operationId: "updateGenero"
      parameters:
        - $ref: '#/parameters/Id'
        - in: body
          name: "request"
          schema:
            $ref: '#/definitions/Genero'
      responses:
        200:
          description: "Ok - Gênero atualizado com sucesso"
          schema:
            $ref: '#/definitions/Genero'
        400:
          description: "Bad Request - Parâmetros informados são inválidos"
          schema:
            $ref: '#/definitions/ResponseError'
        404:
          description: "Not Found - Gênero não encontrado"
          schema:
            $ref: '#/definitions/ResponseError'
        500:
          description: "Internal Server Error - Erro não mapeado"
          schema:
            $ref: '#/definitions/ResponseError'     

    patch:
      tags:
        - "Gênero"
      summary: "Adiciona filmes ao Gênero"
      description:  "Adiciona filmes ao Gênero de acordo com o ID fornecido"
      operationId: "adicionaFilmesAoGenero"
      parameters:
        - $ref: '#/parameters/Id'
        - in: body
          name: "request"
          schema:
            properties:
              idFilme:
                type: integer
                example: 10
      responses:
        200:
          description: "Ok - Filme adicionado ao Gênero com sucesso"
          schema:
            $ref: '#/definitions/Genero'
        400:
          description: "Bad Request - Parâmetros informados são inválidos"
          schema:
            $ref: '#/definitions/ResponseError'
        404:
          description: "Not Found - Gênero não encontrado"
          schema:
            $ref: '#/definitions/ResponseError'
        500:
          description: "Internal Server Error - Erro não mapeado"
          schema:
            $ref: '#/definitions/ResponseError'    
  
    delete:
      tags:
        - "Gênero"
      summary: "Deleta um Gênero"
      description: "Deleta um Gênero cadastrado de acordo com o ID fornecido"
      operationId: "deleteGenero"
      parameters:
        - $ref: '#/parameters/Id'
      responses:
        200:
          description: "Ok - Gênero deletado com sucesso"
        400:
          description: "Bad Request - Parâmetros informádos são inválidos"
          schema:
            $ref: '#/definitions/ResponseError'
        404:
          description: "Not Found - Gênero não encontrado"
          schema:
            $ref: '#/definitions/ResponseError'
        500:
          description: "Internal Server Error - Erro não mapeado"
          schema:
            $ref: '#/definitions/ResponseError'
  
  /filmes/artistas/{id}/filmografia: #GET
    get:
      tags:
        - "Filmografia"
      summary: "Retorna a filmografia de um Artista específico"
      description: "Retorna uma lista de filmes relacionada à um Artista específico com o número de páginas e itens por página"
      operationId: "getFilmografia"
      parameters:
        - $ref: '#/parameters/Id'
        - $ref: '#/parameters/Page'
        - $ref: '#/parameters/Size'
      responses:
        200:
          description: "Ok - Busca efetuada com sucesso"
          schema:
            type: array
            items:
              $ref: '#/definitions/Filme'
        400:
          description: "Bad Request - Parâmetros informados são inválidos"
          schema:
            $ref: '#/definitions/ResponseError'
        404:
          description: "Not Found - Filmografia não encontrado"
          schema:
            $ref: '#/definitions/ResponseError'
        500:
          description: "Internal Server Error - Erro não mapeado"
          schema:
            $ref: '#/definitions/ResponseError'    
  
  /health:
    get:
      tags:
        - "Healthcheck"
      summary: "Healthcheck da aplicação"
      operationId: "health"
      description: "Rota de healthcheck da aplicação"
      responses:
        200:
          description: "API funcionando"
          schema:
            properties:
              version:
                type: string
              environment:
                type: string
    
definitions:
  Filme:
    required: 
      - "nome"
      - "genero"
      - "ano"
    type: object
    properties:
      id:
        type: integer
        format: int32
        example: 1
      nome:
        type: string
      genero:
        $ref: '#/definitions/Genero'
      ano:
        type: integer
        format: int32
        example: 1990
      artistas:
        $ref: '#/definitions/Artista'
      urlPoster:
        type: string
  
  Genero:
    required:
      - "nome"
    type: object
    properties:
      id:
        type: integer
        format: int32
        example: 3
      nome:
        type: string
        example: Terror
      filmes:
        type: array
        items:
          $ref: '#/definitions/Filme'
  
  Artista:
    required:
      - "nome"
    type: object
    properties:
      id:
        type: integer
        format: int32
        example: 2
      nome:
        type: string
      filmografia:
        type: array
        items:
          $ref: '#/definitions/Filme'
        
  ResponseError:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      messages:
        type: array
        items:
          type: string
      cause:
        type: object
        properties:
          name:
            type: string
          code:
            type: integer
          message:
            type: string
        
parameters:
  Page:
    in: query
    name: "page"
    type: integer
    format: int32
    default: 1
    
  Size:
    in: query
    name: "size"
    type: integer
    format: int32
    default: 20
    
  Id:
    in: path
    name: "id"
    type: integer
    format: int32
    required: true
